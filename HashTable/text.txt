using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HashTable
{
    internal class HashSet<T>
    {
        // Заменить List на LinkedList
        // Сделать Dictionary, где индекс пары зависит от хеша ключа
        // Написать свою реализацию GetHashCode (в  с++ сделать функцию int hash(T item))
        // Сигнатура словаря в C++
        // template <typename TKey, typename TValue, class THash = std::hash<TKey>>
        // class HashDictionary{};

        // Пример реализации THash
        // struct Hash {
        // public:
        //     size_t operator() (std::string s) {
        //         size_t hash = // как-то найти хеш
        //         return hash;
        //     }
        // }

        // Пример использования THash
        // public:
        //     void add(T item) {
        //         size_t hash = THash{}(item) % _capacity;
        //         // добавление элемента
        //     }

        // auto dict = new HashDictionary<std::string, int, std::hash<std::string>>();


        private List<T>[] _buckets;
        private int _capacity;
        private int _count;

        private const float GROWTH_FACTOR = 1f;

        public int Capacity => _capacity;
        public int Count => _count;

        public HashSet()
        {
            _count = 0;
            _capacity = 16;
            _buckets = new List<T>[_capacity];
            for(int i = 0; i < _capacity; i++)
            {
                _buckets[i] = new List<T>();
            }
        }

        public void Add(T item)
        {
            int hash = Mod(item.GetHashCode(), _capacity);

            if (_buckets[hash].Contains(item))
            {
                return;
            }

            if (_count > _capacity * GROWTH_FACTOR)
            {
                Expand();
            }

            _buckets[hash].Add(item);
            _count++;
        }

        public bool Contains(T item)
        {
            int hash = Mod(item.GetHashCode(), _capacity);
            return _buckets[hash].Contains(item);
        }

        public void Remove(T item)
        {
            int hash = Mod(item.GetHashCode(), _capacity);

            if (_buckets[hash].Contains(item))
            {
                _buckets[hash].Remove(item);
            }
        }

        private void Expand()
        {
            int newCapacity = _capacity * 2;
            List<T>[] newArray = new List<T>[newCapacity];

            for(int i = 0; i < newCapacity; i++)
            {
                newArray[i] = new List<T>();
            }

            foreach(var list in _buckets)
            {
                foreach(var item in list)
                {
                    int hash = Mod(item.GetHashCode(), newCapacity);
                    newArray[hash].Add(item);
                }
            }

            _capacity = newCapacity;
            _buckets = newArray;
        }

        private int Mod(int num, int div)
        {
            int mod = num % div;
            return mod < 0 ? -mod : mod;
        }
    }
}